{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0. Importing the Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/luisarmandovillarreal/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os, sys, re, json, time\n",
    "import itertools, collections\n",
    "from importlib import reload\n",
    "from IPython.display import display\n",
    "import scipy.sparse\n",
    "import nltk\n",
    "from w266_common import utils, vocabulary, tf_embed_viz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Getting Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('data/clean_tweets.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# getting the timestamp column in proper format\n",
    "df['timestamp'] = pd.to_datetime(df['timestamp'], infer_datetime_format=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extracting date from timestamp\n",
    "df['date'] = df['timestamp'].map(lambda x:x.date())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We only want data from 4th March, 2019 onwards. This is the period we have chosen to explore."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[df['date'] >= pd.to_datetime('2019-03-04').date()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>ticker</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>tweet</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>110526365952428032</td>\n",
       "      <td>DWDP</td>\n",
       "      <td>2019-03-12 00:26:00</td>\n",
       "      <td>&lt;s&gt; traders sell shares of  on strength  &lt;/s&gt;</td>\n",
       "      <td>2019-03-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1103805919568293888</td>\n",
       "      <td>T</td>\n",
       "      <td>2019-03-07 23:53:00</td>\n",
       "      <td>&lt;s&gt;  ich   ich  &lt;/s&gt;</td>\n",
       "      <td>2019-03-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1103801007375552514</td>\n",
       "      <td>T</td>\n",
       "      <td>2019-03-07 23:34:00</td>\n",
       "      <td>&lt;s&gt;  house democrats seek details of trump eff...</td>\n",
       "      <td>2019-03-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1103735736153432064</td>\n",
       "      <td>T</td>\n",
       "      <td>2019-03-07 19:14:00</td>\n",
       "      <td>&lt;s&gt;  t  two new revenue streams    att   inves...</td>\n",
       "      <td>2019-03-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1103724496027115520</td>\n",
       "      <td>T</td>\n",
       "      <td>2019-03-07 18:30:00</td>\n",
       "      <td>&lt;s&gt; telus co declares quarterly dividend of  t...</td>\n",
       "      <td>2019-03-07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              tweet_id ticker           timestamp  \\\n",
       "0   110526365952428032   DWDP 2019-03-12 00:26:00   \n",
       "1  1103805919568293888      T 2019-03-07 23:53:00   \n",
       "2  1103801007375552514      T 2019-03-07 23:34:00   \n",
       "3  1103735736153432064      T 2019-03-07 19:14:00   \n",
       "4  1103724496027115520      T 2019-03-07 18:30:00   \n",
       "\n",
       "                                               tweet        date  \n",
       "0      <s> traders sell shares of  on strength  </s>  2019-03-12  \n",
       "1                               <s>  ich   ich  </s>  2019-03-07  \n",
       "2  <s>  house democrats seek details of trump eff...  2019-03-07  \n",
       "3  <s>  t  two new revenue streams    att   inves...  2019-03-07  \n",
       "4  <s> telus co declares quarterly dividend of  t...  2019-03-07  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2572925, 5)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# removing all the duplicate tweets\n",
    "df.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2572925, 5)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Adding Sentiment Score to Each Tweet"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the sentiment score for our tweets, we decided to use 'vaderSentimentAnalyzer'. As per the definition from the creators:\n",
    "\n",
    "**VADER (Valence Aware Dictionary and sEntiment Reasoner) is a lexicon and rule-based sentiment analysis tool that is specifically attuned to sentiments expressed in social media, and works well on texts from other domains.**\n",
    "\n",
    "Since we are exclusively dealing with sentimenn analysis of social media messages (tweets, in our case), VADER seemed the appropriate choice. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extracting sentiment score for each tweet\n",
    "# we are interested in only the compound polarity score\n",
    "# details about this number can be found in paper accompanying this notebook\n",
    "\n",
    "analyzer = SentimentIntensityAnalyzer()\n",
    "df['compound'] = df['tweet'].map(\n",
    "    lambda x: list(analyzer.polarity_scores(x).values())[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # extracting day_name, day, and day_of_week in case we need it for analysis\n",
    "# combined_df['day_name'] = combined_df['timestamp'].map(lambda x: x.day_name())\n",
    "# combined_df['day'] = combined_df['timestamp'].map(lambda x: x.day)\n",
    "# combined_df['day_of_week'] = combined_df['timestamp'].map(lambda x: x.dayofweek)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#combined_df.to_csv('tweets_with_sentiment.csv')\n",
    "#combined_df = pd.read_csv('tweets_with_sentiment.csv', index_col=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>ticker</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>tweet</th>\n",
       "      <th>date</th>\n",
       "      <th>compound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>110526365952428032</td>\n",
       "      <td>DWDP</td>\n",
       "      <td>2019-03-12 00:26:00</td>\n",
       "      <td>&lt;s&gt; traders sell shares of  on strength  &lt;/s&gt;</td>\n",
       "      <td>2019-03-12</td>\n",
       "      <td>0.6597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1103805919568293888</td>\n",
       "      <td>T</td>\n",
       "      <td>2019-03-07 23:53:00</td>\n",
       "      <td>&lt;s&gt;  ich   ich  &lt;/s&gt;</td>\n",
       "      <td>2019-03-07</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1103801007375552514</td>\n",
       "      <td>T</td>\n",
       "      <td>2019-03-07 23:34:00</td>\n",
       "      <td>&lt;s&gt;  house democrats seek details of trump eff...</td>\n",
       "      <td>2019-03-07</td>\n",
       "      <td>-0.4404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1103735736153432064</td>\n",
       "      <td>T</td>\n",
       "      <td>2019-03-07 19:14:00</td>\n",
       "      <td>&lt;s&gt;  t  two new revenue streams    att   inves...</td>\n",
       "      <td>2019-03-07</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1103724496027115520</td>\n",
       "      <td>T</td>\n",
       "      <td>2019-03-07 18:30:00</td>\n",
       "      <td>&lt;s&gt; telus co declares quarterly dividend of  t...</td>\n",
       "      <td>2019-03-07</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              tweet_id ticker           timestamp  \\\n",
       "0   110526365952428032   DWDP 2019-03-12 00:26:00   \n",
       "1  1103805919568293888      T 2019-03-07 23:53:00   \n",
       "2  1103801007375552514      T 2019-03-07 23:34:00   \n",
       "3  1103735736153432064      T 2019-03-07 19:14:00   \n",
       "4  1103724496027115520      T 2019-03-07 18:30:00   \n",
       "\n",
       "                                               tweet        date  compound  \n",
       "0      <s> traders sell shares of  on strength  </s>  2019-03-12    0.6597  \n",
       "1                               <s>  ich   ich  </s>  2019-03-07    0.0000  \n",
       "2  <s>  house democrats seek details of trump eff...  2019-03-07   -0.4404  \n",
       "3  <s>  t  two new revenue streams    att   inves...  2019-03-07    0.0000  \n",
       "4  <s> telus co declares quarterly dividend of  t...  2019-03-07    0.0000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2572925, 6)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.sort_values(by = 'compound', ascending=False, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>ticker</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>tweet</th>\n",
       "      <th>date</th>\n",
       "      <th>compound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2340363</th>\n",
       "      <td>1111066228028772353</td>\n",
       "      <td>MCD</td>\n",
       "      <td>2019-03-28 00:43:00</td>\n",
       "      <td>&lt;s&gt; seth rich seth rich seth rich seth rich se...</td>\n",
       "      <td>2019-03-28</td>\n",
       "      <td>0.9972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>629831</th>\n",
       "      <td>1108837319778406406</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>2019-03-21 21:06:00</td>\n",
       "      <td>&lt;s&gt; pagar entre 100 y 180 euros al ao por un s...</td>\n",
       "      <td>2019-03-21</td>\n",
       "      <td>0.9944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1591748</th>\n",
       "      <td>1109126400894816258</td>\n",
       "      <td>V</td>\n",
       "      <td>2019-03-22 16:15:00</td>\n",
       "      <td>&lt;s&gt; charlize sky love i love you my life sky i...</td>\n",
       "      <td>2019-03-22</td>\n",
       "      <td>0.9923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1591698</th>\n",
       "      <td>1109127331610853379</td>\n",
       "      <td>V</td>\n",
       "      <td>2019-03-22 16:18:00</td>\n",
       "      <td>&lt;s&gt; charlize sky love i love you my life sky i...</td>\n",
       "      <td>2019-03-22</td>\n",
       "      <td>0.9923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315952</th>\n",
       "      <td>1110920183894421505</td>\n",
       "      <td>INTC</td>\n",
       "      <td>2019-03-27 15:03:00</td>\n",
       "      <td>&lt;s&gt; apex legends is in apex and they have to b...</td>\n",
       "      <td>2019-03-27</td>\n",
       "      <td>0.9920</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    tweet_id ticker           timestamp  \\\n",
       "2340363  1111066228028772353    MCD 2019-03-28 00:43:00   \n",
       "629831   1108837319778406406   MSFT 2019-03-21 21:06:00   \n",
       "1591748  1109126400894816258      V 2019-03-22 16:15:00   \n",
       "1591698  1109127331610853379      V 2019-03-22 16:18:00   \n",
       "315952   1110920183894421505   INTC 2019-03-27 15:03:00   \n",
       "\n",
       "                                                     tweet        date  \\\n",
       "2340363  <s> seth rich seth rich seth rich seth rich se...  2019-03-28   \n",
       "629831   <s> pagar entre 100 y 180 euros al ao por un s...  2019-03-21   \n",
       "1591748  <s> charlize sky love i love you my life sky i...  2019-03-22   \n",
       "1591698  <s> charlize sky love i love you my life sky i...  2019-03-22   \n",
       "315952   <s> apex legends is in apex and they have to b...  2019-03-27   \n",
       "\n",
       "         compound  \n",
       "2340363    0.9972  \n",
       "629831     0.9944  \n",
       "1591748    0.9923  \n",
       "1591698    0.9923  \n",
       "315952     0.9920  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_daily = df.groupby(['ticker','date'])['compound'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_daily = df_daily.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_daily.to_csv('data_daily.csv', sep=',', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 0.0000    1269465\n",
       "-0.2960      77956\n",
       " 0.3612      33173\n",
       " 0.4404      31864\n",
       " 0.4215      29763\n",
       " 0.3400      28078\n",
       " 0.4019      27674\n",
       " 0.3182      23210\n",
       "-0.4019      22571\n",
       " 0.6369      20544\n",
       " 0.2023      20318\n",
       " 0.4588      19773\n",
       "-0.5267      18216\n",
       " 0.1779      17221\n",
       " 0.0772      16810\n",
       "-0.5574      16742\n",
       " 0.3818      16457\n",
       " 0.2960      16136\n",
       " 0.2732      15710\n",
       " 0.4939      15662\n",
       " 0.5106      15468\n",
       " 0.5859      15047\n",
       " 0.2500      13687\n",
       "-0.3400      13687\n",
       " 0.5719      13068\n",
       "-0.2263      12611\n",
       " 0.4767      11983\n",
       "-0.4767      11950\n",
       " 0.6249      11736\n",
       "-0.1027      11613\n",
       "            ...   \n",
       "-0.4886          1\n",
       "-0.1353          1\n",
       "-0.4187          1\n",
       "-0.1211          1\n",
       " 0.7068          1\n",
       "-0.7974          1\n",
       " 0.6489          1\n",
       "-0.0225          1\n",
       "-0.2241          1\n",
       "-0.2378          1\n",
       "-0.8287          1\n",
       "-0.2839          1\n",
       " 0.2549          1\n",
       " 0.1958          1\n",
       " 0.1812          1\n",
       "-0.0774          1\n",
       "-0.5363          1\n",
       "-0.3060          1\n",
       " 0.0070          1\n",
       "-0.1792          1\n",
       " 0.2417          1\n",
       "-0.1251          1\n",
       "-0.8448          1\n",
       "-0.5409          1\n",
       "-0.9834          1\n",
       "-0.1409          1\n",
       "-0.9288          1\n",
       " 0.3959          1\n",
       " 0.9111          1\n",
       " 0.3149          1\n",
       "Name: compound, Length: 15914, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['compound'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 Sample Tweets to Manually Ascertain Polarity Score Quality"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This portion is aimed at looking at few samples of tweets and manually see if the polarity scores sit well with the content of the tweet.\n",
    "We will look at all three cases: positive, neutral and negative example tweets."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.1 Positive Tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MCD\n",
      "<s> seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich seth rich </s>\n",
      "\n",
      "\n",
      "MSFT\n",
      "<s> pagar entre 100 y 180 euros al ao por un servicio de que de ser y encima va como la xd xd xd xd xd xd xd xd xd xd xd xd xd </s>\n",
      "\n",
      "\n",
      "V\n",
      "<s> charlize sky love i love you my life sky i do not stop you from thinking love please my life i ask you with love heaven help me with the visa to be able to see the united states i love you i want to be with you love heaven please my name is jose luis noboa giler  </s>\n",
      "\n",
      "\n",
      "V\n",
      "<s> charlize sky love i love you my life sky i do not stop you from thinking love please my life i ask you with love heaven help me with the visa to be able to see the united states i love you i want to be with you love heaven please my name is jose luis noboa giler sky  </s>\n",
      "\n",
      "\n",
      "INTC\n",
      "<s> apex legends is in apex and they have to be at least one for a while but i wanna is it gonna was gonna a great time of year to join our clan join join me join join my clan clan today join us join me join us join clan join join me for join me in my clan clan please thank i </s>\n",
      "\n",
      "\n",
      "XOM\n",
      "<s> clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin clear skin rt this to have a clear skin ignore for bad luck </s>\n",
      "\n",
      "\n",
      "NFLX\n",
      "<s> im in tears  netflix fight me please please please pleas please please please please please please please please please please please i love motley crue please plead powder please please pleas please please please please pleases leale </s>\n",
      "\n",
      "\n",
      "MSFT\n",
      "<s> i have just come to the shocking conclusion that windows 7 is actually windows win 10  1 win 20  2 win 30  3 win 95  4 win 98  5 win me  6 win 2000  7 win xp  8 win vista  9 win 7  between this and the xbox i am convinced  microsoft </s>\n",
      "\n",
      "\n",
      "NFLX\n",
      "<s> queer eye in conversation okay but like thank you to these amazing humans who spread love and happiness and support to i seriously love how open they all beautiful people and the world needs more of them in the media </s>\n",
      "\n",
      "\n",
      "V\n",
      "<s> charlize i love you sky soon have the visa love just have faith speeding up the process of my visa heaven i love you only help me with the letter of invitation love an agency of the united states is helping me with the visa heaven please love  </s>\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_temp = df.loc[df['compound'] > 0.05]\n",
    "for row in df_temp[:10].itertuples():\n",
    "    print(row[2])\n",
    "    print(row[4])\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.2 Negative Tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VZ\n",
      "<s> fraud oriented 8 months verizon acknowledged that i owe have the but they continue to send and have reported their false claims to all three credit reporting fraud fraud fraud fraud fraud fraud fraud </s>\n",
      "\n",
      "\n",
      "NFLX\n",
      "<s> on my block on my block on my block on my block on my block on my block on my block on my block on my block on my block on my block on my block on my block on my block on my block on my block </s>\n",
      "\n",
      "\n",
      "NFLX\n",
      "<s> kung fu on netflix kung fu on netflix kung fu on netflix kung fu on netflix kung fu on netflix kung fu on netflix kung fu on netflix kung fu on netflix kung fu on netflix      </s>\n",
      "\n",
      "\n",
      "T\n",
      "<s> you same ass toxic jealous dumb worthless bitches i give a fuck about you at all how long you been how many male witnesses to that can speak on you a dead bitch tired of your shit bitch you a dead bitch </s>\n",
      "\n",
      "\n",
      "NFLX\n",
      "<s> fuck fuck netflix fuck netflix fuck netflix fuck netflix fuck netflix fuck netflix fuck netflix fuck netflix fuck fuck netflix and its dumb ass shows that literally no one  netflix fuck u no one wants we want one day at a time  </s>\n",
      "\n",
      "\n",
      "NKE\n",
      "<s> en broke ass wishin she was a qt azn ass adidas not nike lovin ass fifty shades of grey lovin but vanilla and motionless in bed no head givin ass my older kinda hot ass choker wearin ass do anal ass flat ass havin ass my mom hates me ass cook ass twigs </s>\n",
      "\n",
      "\n",
      "MSFT\n",
      "<s> wish we could protect babies this well like all we want to do is kill kill kill kill kill kill kill kill kill the babies kill the babies kill the babies kill the babies </s>\n",
      "\n",
      "\n",
      "NFLX\n",
      "<s> fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you netflix fuck you  netflix  </s>\n",
      "\n",
      "\n",
      "T\n",
      "<s> fascist fascist fascist fascist fascist fascist fascist fascist fascist fascist fascist fascist fascist fascist fascist var ju kul att fascist hela ska nog det s fort eller om jag ej precis som </s>\n",
      "\n",
      "\n",
      "CMCSA\n",
      "<s> i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast i hate comcast </s>\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_temp = df.loc[df['compound'] < -0.05]\n",
    "for row in df_temp[-10:].itertuples():\n",
    "    print(row[2])\n",
    "    print(row[4])\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.3 Neutral Tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BA\n",
      "<s> i fully agree with at the the plane is not safe to fly canada just grounded the but i know that in the when the fix is put out for the system bug that may be causing these i will fly on the that the predecessor to </s>\n",
      "\n",
      "\n",
      "INTC\n",
      "<s> must be waiting for intel on what to be offended my timeline is soooo much more mature and all the liberal tears have </s>\n",
      "\n",
      "\n",
      "LLY\n",
      "<s> the drugmaker eli lilly will begin selling a cheaper version of its most popular in an effort to head off criticism about the rising costs of prescription read more   jdrf  </s>\n",
      "\n",
      "\n",
      "ORCL\n",
      "<s> the british house of commons parliamentary sessions are more engaging drama than any soap ever what an utter ludicrous situation has </s>\n",
      "\n",
      "\n",
      "BA\n",
      "<s> that is the reason of people are now looking hard at that particular approving the as the same type was financially very advantageous to of as they can advertise no pilot type ratings are </s>\n",
      "\n",
      "\n",
      "V\n",
      "<s> unlike germans pay visa fees in most i want the passport </s>\n",
      "\n",
      "\n",
      "DIS\n",
      "<s> lion king has the better written characters out of most disney movies the protagonists are more where as aladdin although he did heroic deeds he was dishonest to princess jasmine and somewhat abusive to he redeemed himself at the end </s>\n",
      "\n",
      "\n",
      "DIS\n",
      "<s> what i really want is a sit down disney tellall with the jonas and i wanna know the shit they got put through bc they all came out the other end fucked up and </s>\n",
      "\n",
      "\n",
      "CVX\n",
      "<s> the most convincing point is that sources said the us govt said it would block the loan over chevron and assange asylum so if they are delivering on one it suggests wl claim of both conditions is obviously no one can be sure atm </s>\n",
      "\n",
      "\n",
      "PEP\n",
      "<s> hard i really want pepsi </s>\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_temp = df.loc[(df['compound'] < 0.05) & (df['compound'] > -0.05)]\n",
    "for row in df_temp[:10].itertuples():\n",
    "    print(row[2])\n",
    "    print(row[4])\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2 Data Exploration with Aggregate Sentiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get counts of positive, neutral and negative tweets\n",
    "def count_sentiments(sentiment):\n",
    "\n",
    "    if sentiment >= 0.05:\n",
    "        return 1\n",
    "    elif (sentiment > -0.05) and (sentiment < 0.05):\n",
    "        return 0\n",
    "    else:\n",
    "        return -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# new column to determine if tweet is positive or negative\n",
    "df['pos/neg'] = df['compound'].map(count_sentiments)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# new dataframe to count individual sentiment tweets per day\n",
    "sentiment_counts = pd.DataFrame(df.groupby(['date', 'pos/neg'])['tweet'].agg('count'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>pos/neg</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-12-29</th>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-04</th>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-28</th>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-21</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-14</th>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    tweet\n",
       "date       pos/neg       \n",
       "2016-12-29 0            1\n",
       "2017-06-04 0            1\n",
       "2017-07-28 0            1\n",
       "2017-08-21 1            1\n",
       "2017-12-14 0            1"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentiment_counts.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# groupby dates to get counts of tweets by day\n",
    "sent_agg_by_day = pd.DataFrame(df.groupby('date')['compound'].agg('count'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>compound</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-03-04</th>\n",
       "      <td>25948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-05</th>\n",
       "      <td>30296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-06</th>\n",
       "      <td>32652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-07</th>\n",
       "      <td>31029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-08</th>\n",
       "      <td>26455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-09</th>\n",
       "      <td>18026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-10</th>\n",
       "      <td>16637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-11</th>\n",
       "      <td>28330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-12</th>\n",
       "      <td>36180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-13</th>\n",
       "      <td>93448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-14</th>\n",
       "      <td>72622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-15</th>\n",
       "      <td>45853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-16</th>\n",
       "      <td>26193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-17</th>\n",
       "      <td>33389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-18</th>\n",
       "      <td>50849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-19</th>\n",
       "      <td>61348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-20</th>\n",
       "      <td>62674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-21</th>\n",
       "      <td>68910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-22</th>\n",
       "      <td>51315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-23</th>\n",
       "      <td>126290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-24</th>\n",
       "      <td>162342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-25</th>\n",
       "      <td>271118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-26</th>\n",
       "      <td>247583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-27</th>\n",
       "      <td>269393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-28</th>\n",
       "      <td>281255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-29</th>\n",
       "      <td>402790</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            compound\n",
       "date                \n",
       "2019-03-04     25948\n",
       "2019-03-05     30296\n",
       "2019-03-06     32652\n",
       "2019-03-07     31029\n",
       "2019-03-08     26455\n",
       "2019-03-09     18026\n",
       "2019-03-10     16637\n",
       "2019-03-11     28330\n",
       "2019-03-12     36180\n",
       "2019-03-13     93448\n",
       "2019-03-14     72622\n",
       "2019-03-15     45853\n",
       "2019-03-16     26193\n",
       "2019-03-17     33389\n",
       "2019-03-18     50849\n",
       "2019-03-19     61348\n",
       "2019-03-20     62674\n",
       "2019-03-21     68910\n",
       "2019-03-22     51315\n",
       "2019-03-23    126290\n",
       "2019-03-24    162342\n",
       "2019-03-25    271118\n",
       "2019-03-26    247583\n",
       "2019-03-27    269393\n",
       "2019-03-28    281255\n",
       "2019-03-29    402790"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent_agg_by_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merging datasets to get counts of positive, negative and neutral tweets daily\n",
    "merged_dataset = sentiment_counts.merge(sent_agg_by_day, left_index=True, right_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_dataset = merged_dataset.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>pos/neg</th>\n",
       "      <th>tweet</th>\n",
       "      <th>compound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-03-04</td>\n",
       "      <td>-1</td>\n",
       "      <td>5970</td>\n",
       "      <td>34697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-03-04</td>\n",
       "      <td>0</td>\n",
       "      <td>14727</td>\n",
       "      <td>34697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-03-04</td>\n",
       "      <td>1</td>\n",
       "      <td>14000</td>\n",
       "      <td>34697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-03-05</td>\n",
       "      <td>-1</td>\n",
       "      <td>6811</td>\n",
       "      <td>38736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-03-05</td>\n",
       "      <td>0</td>\n",
       "      <td>16115</td>\n",
       "      <td>38736</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  pos/neg  tweet  compound\n",
       "0  2019-03-04       -1   5970     34697\n",
       "1  2019-03-04        0  14727     34697\n",
       "2  2019-03-04        1  14000     34697\n",
       "3  2019-03-05       -1   6811     38736\n",
       "4  2019-03-05        0  16115     38736"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#merged_dataset = merged_dataset.unstack()\n",
    "merged_dataset = merged_dataset.pivot_table(index='date', values='tweet', columns='pos/neg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_dataset.rename(columns={-1: 'neg', 0:'neutral', 1:'pos'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_dataset['abs_sentiment'] = merged_dataset['pos']-merged_dataset['neg']\n",
    "merged_dataset['rel_sentiment'] = (merged_dataset['pos']-merged_dataset['neg'])/(merged_dataset['pos']+merged_dataset['neg'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The relative and absolute sentiment are calculated using the aggregate number of positive and negative tweets. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>pos/neg</th>\n",
       "      <th>neg</th>\n",
       "      <th>neutral</th>\n",
       "      <th>pos</th>\n",
       "      <th>abs_sentiment</th>\n",
       "      <th>rel_sentiment</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-03-04</th>\n",
       "      <td>5970</td>\n",
       "      <td>14727</td>\n",
       "      <td>14000</td>\n",
       "      <td>8030</td>\n",
       "      <td>0.402103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-05</th>\n",
       "      <td>6811</td>\n",
       "      <td>16115</td>\n",
       "      <td>15810</td>\n",
       "      <td>8999</td>\n",
       "      <td>0.397816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-06</th>\n",
       "      <td>7452</td>\n",
       "      <td>17841</td>\n",
       "      <td>17015</td>\n",
       "      <td>9563</td>\n",
       "      <td>0.390853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-07</th>\n",
       "      <td>6847</td>\n",
       "      <td>16893</td>\n",
       "      <td>16929</td>\n",
       "      <td>10082</td>\n",
       "      <td>0.424041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-08</th>\n",
       "      <td>5759</td>\n",
       "      <td>15008</td>\n",
       "      <td>15602</td>\n",
       "      <td>9843</td>\n",
       "      <td>0.460793</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "pos/neg      neg  neutral    pos  abs_sentiment  rel_sentiment\n",
       "date                                                          \n",
       "2019-03-04  5970    14727  14000           8030       0.402103\n",
       "2019-03-05  6811    16115  15810           8999       0.397816\n",
       "2019-03-06  7452    17841  17015           9563       0.390853\n",
       "2019-03-07  6847    16893  16929          10082       0.424041\n",
       "2019-03-08  5759    15008  15602           9843       0.460793"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "avg_sent_by_day = combined_df.groupby('date')['compound'].agg('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(30,10))\n",
    "plt.ylim(0,0.3)\n",
    "plt.plot(avg_sent_by_day);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We notice that, in general, the attitude manifested in the tweets gathered by us has a neutral-positive bend."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "pos_individual_sent_by_day = merged_dataset['pos']\n",
    "neg_individual_sent_by_day = merged_dataset['neg']\n",
    "neutral_individual_sent_by_day = merged_dataset['neutral']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(25,8));\n",
    "ax.plot(pos_individual_sent_by_day, label='positive')\n",
    "ax.plot(neg_individual_sent_by_day, label='negative');\n",
    "ax.plot(neutral_individual_sent_by_day, label='neutral');\n",
    "leg = ax.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is noticed that there are considerable increase in number of tweets as the month went on. This is because of our data gathering strategy which was split in two different ways. In the latter half of our data gathering process, we had much more flexible approach to compiling tweets, and that is reflected in the above trend clearly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_for_barplot = merged_dataset[['neg', 'pos', 'neutral']]\n",
    "df_bar_plot_v = df_for_barplot.sum()\n",
    "\n",
    "plt.figure(figsize=(20,8))\n",
    "plt.ylabel('Number of Tweets')\n",
    "plt.xlabel('Category of Tweets')\n",
    "plt.bar(list(df_bar_plot_v.index), list(df_bar_plot_v.values));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Stock Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1 Aggregate Stock Data (S&P500 Top 500 and S&P500 top 50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We downloaded two different forms of datasets for stocks.\n",
    "\n",
    "1) S&P500 Complete Index\n",
    "\n",
    "2) S&P500 Top 50 Stocks index (the companies we gathered the tweets for)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-12-28</th>\n",
       "      <td>2498.770020</td>\n",
       "      <td>2520.270020</td>\n",
       "      <td>2472.889893</td>\n",
       "      <td>2485.739990</td>\n",
       "      <td>2485.739990</td>\n",
       "      <td>3702620000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>2498.939941</td>\n",
       "      <td>2509.239990</td>\n",
       "      <td>2482.820068</td>\n",
       "      <td>2506.850098</td>\n",
       "      <td>2506.850098</td>\n",
       "      <td>3442870000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-02</th>\n",
       "      <td>2476.959961</td>\n",
       "      <td>2519.489990</td>\n",
       "      <td>2467.469971</td>\n",
       "      <td>2510.030029</td>\n",
       "      <td>2510.030029</td>\n",
       "      <td>3733160000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-03</th>\n",
       "      <td>2491.919922</td>\n",
       "      <td>2493.139893</td>\n",
       "      <td>2443.959961</td>\n",
       "      <td>2447.889893</td>\n",
       "      <td>2447.889893</td>\n",
       "      <td>3822860000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-04</th>\n",
       "      <td>2474.330078</td>\n",
       "      <td>2538.070068</td>\n",
       "      <td>2474.330078</td>\n",
       "      <td>2531.939941</td>\n",
       "      <td>2531.939941</td>\n",
       "      <td>4213410000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Open         High          Low        Close    Adj Close  \\\n",
       "Date                                                                          \n",
       "2018-12-28  2498.770020  2520.270020  2472.889893  2485.739990  2485.739990   \n",
       "2018-12-31  2498.939941  2509.239990  2482.820068  2506.850098  2506.850098   \n",
       "2019-01-02  2476.959961  2519.489990  2467.469971  2510.030029  2510.030029   \n",
       "2019-01-03  2491.919922  2493.139893  2443.959961  2447.889893  2447.889893   \n",
       "2019-01-04  2474.330078  2538.070068  2474.330078  2531.939941  2531.939941   \n",
       "\n",
       "                Volume  \n",
       "Date                    \n",
       "2018-12-28  3702620000  \n",
       "2018-12-31  3442870000  \n",
       "2019-01-02  3733160000  \n",
       "2019-01-03  3822860000  \n",
       "2019-01-04  4213410000  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data for complete S&P500 index (gathered for analysis)\n",
    "agg_sp500 = pd.read_csv('^GSPC.csv')\n",
    "agg_sp500.set_index('Date', inplace=True)\n",
    "agg_sp500.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# S&P500 Top 50 Dataset\n",
    "# We will use the values from this dataset for our causality analysis\n",
    "agg_sp50 = pd.read_excel('S&PTop50 Aggregate Data-.xls')\n",
    "agg_sp50.rename(columns={'Effective date ':'date'}, inplace=True)\n",
    "agg_sp50.set_index('date', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P 500 Top 50</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>1999.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-02</th>\n",
       "      <td>2008.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-03</th>\n",
       "      <td>1947.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-04</th>\n",
       "      <td>2019.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-07</th>\n",
       "      <td>2029.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            S&P 500 Top 50\n",
       "date                      \n",
       "2018-12-31         1999.51\n",
       "2019-01-02         2008.08\n",
       "2019-01-03         1947.96\n",
       "2019-01-04         2019.01\n",
       "2019-01-07         2029.65"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agg_sp50 = pd.DataFrame(agg_sp50['S&P 500 Top 50'])\n",
    "agg_sp50.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2 Analyzing Stock Market Behaviour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dataframe constructed that will eventually be used for causality analysis\n",
    "df_for_causality = merged_dataset.merge(agg_sp50, left_index=True, right_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataframe captures tweets and their sentiments, along with S&P500 Top 50 Index, from 4th March 2019 to 29th March 2019."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neg</th>\n",
       "      <th>neutral</th>\n",
       "      <th>pos</th>\n",
       "      <th>abs_sentiment</th>\n",
       "      <th>rel_sentiment</th>\n",
       "      <th>S&amp;P 500 Top 50</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-03-04</th>\n",
       "      <td>5970</td>\n",
       "      <td>14727</td>\n",
       "      <td>14000</td>\n",
       "      <td>8030</td>\n",
       "      <td>0.402103</td>\n",
       "      <td>2208.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-05</th>\n",
       "      <td>6811</td>\n",
       "      <td>16115</td>\n",
       "      <td>15810</td>\n",
       "      <td>8999</td>\n",
       "      <td>0.397816</td>\n",
       "      <td>2210.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-06</th>\n",
       "      <td>7452</td>\n",
       "      <td>17841</td>\n",
       "      <td>17015</td>\n",
       "      <td>9563</td>\n",
       "      <td>0.390853</td>\n",
       "      <td>2199.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-07</th>\n",
       "      <td>6847</td>\n",
       "      <td>16893</td>\n",
       "      <td>16929</td>\n",
       "      <td>10082</td>\n",
       "      <td>0.424041</td>\n",
       "      <td>2180.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-08</th>\n",
       "      <td>5759</td>\n",
       "      <td>15008</td>\n",
       "      <td>15602</td>\n",
       "      <td>9843</td>\n",
       "      <td>0.460793</td>\n",
       "      <td>2177.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             neg  neutral    pos  abs_sentiment  rel_sentiment  S&P 500 Top 50\n",
       "date                                                                          \n",
       "2019-03-04  5970    14727  14000           8030       0.402103         2208.68\n",
       "2019-03-05  6811    16115  15810           8999       0.397816         2210.25\n",
       "2019-03-06  7452    17841  17015           9563       0.390853         2199.74\n",
       "2019-03-07  6847    16893  16929          10082       0.424041         2180.94\n",
       "2019-03-08  5759    15008  15602           9843       0.460793         2177.70"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_for_causality.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2.1 With Absolute Closing Price Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "stocks = df_for_causality['S&P 500 Top 50']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting stocks behaviour time series\n",
    "plt.figure(figsize=(18,6))\n",
    "plt.plot(stocks)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We draw an autocorrelation plot to determine how much does the stock price correlate with its lagged value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating Autocorrelation plot\n",
    "from pandas.plotting import lag_plot\n",
    "lag_plot(stocks)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          t-1       t+1\n",
      "t-1  1.000000  0.803534\n",
      "t+1  0.803534  1.000000\n"
     ]
    }
   ],
   "source": [
    "# getting correlation matrix for lagged values\n",
    "values = pd.DataFrame(stocks.values)\n",
    "dataframe = pd.concat([values.shift(1), values], axis=1)\n",
    "dataframe.columns = ['t-1', 't+1']\n",
    "result = dataframe.corr()\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# autocorrelation plot\n",
    "from pandas.plotting import autocorrelation_plot\n",
    "autocorrelation_plot(stocks)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can clearly see that there is a definite relationship between lagged values of stock price and stock price on certain day.\n",
    "\n",
    "Further connection is established by an Autoregressive model, which is used for Univariate Time Series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag: 8\n",
      "Coefficients: [ 2.19249637e+03  1.05702162e-01 -1.17341363e-01  2.45042828e-01\n",
      " -4.22081749e-02 -4.44440521e-02  3.69473989e-01 -4.61602602e-01\n",
      " -3.15810014e-02]\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.tsa.ar_model import AR\n",
    "\n",
    "# split dataset\n",
    "X = stocks.values\n",
    "# train autoregression\n",
    "model = AR(X)\n",
    "model_fit = model.fit()\n",
    "print('Lag: %s' % model_fit.k_ar)\n",
    "print('Coefficients: %s' % model_fit.params)\n",
    "\n",
    "model_fit.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2.2 Using Log-Return values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In finance, it is a common practice to use log-return values of stock price instead of absolute value. We transform our dataset to include log-return values (and corresponding percentage changes, just for comparison)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "stocks = pd.DataFrame(stocks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "stocks['pct_change'] = stocks['S&P 500 Top 50'].pct_change()\n",
    "stocks['log_ret'] = np.log(stocks['S&P 500 Top 50'])\\\n",
    "- np.log(stocks['S&P 500 Top 50'].shift(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "stocks.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_return = stocks['log_ret']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1296x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(18,6))\n",
    "plt.plot(log_return)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating Autocorrelation plot\n",
    "from pandas.plotting import lag_plot\n",
    "lag_plot(log_return)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          t-1       t+1\n",
      "t-1  1.000000 -0.112558\n",
      "t+1 -0.112558  1.000000\n"
     ]
    }
   ],
   "source": [
    "# getting correlation matrix for lagged values\n",
    "values = pd.DataFrame(log_return.values)\n",
    "dataframe = pd.concat([values.shift(1), values], axis=1)\n",
    "dataframe.columns = ['t-1', 't+1']\n",
    "result = dataframe.corr()\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pandas.plotting import autocorrelation_plot\n",
    "autocorrelation_plot(log_return)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag: 8\n",
      "Coefficients: [ 2.56513270e-04 -3.17672122e-01 -2.52004437e-01  2.82283059e-01\n",
      "  6.05762046e-02 -4.44729778e-02  2.19733362e-01 -3.98043964e-01\n",
      "  2.17318146e-01]\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.tsa.ar_model import AR\n",
    "# split dataset\n",
    "X = log_return.values\n",
    "# train autoregression\n",
    "model = AR(X)\n",
    "model_fit = model.fit()\n",
    "print('Lag: %s' % model_fit.k_ar)\n",
    "print('Coefficients: %s' % model_fit.params)\n",
    "\n",
    "model_fit.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Causality Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_for_causality['pct_change'] = df_for_causality['S&P 500 Top 50'].pct_change()\n",
    "df_for_causality['log_ret'] = np.log(df_for_causality['S&P 500 Top 50'])\\\n",
    "- np.log(df_for_causality['S&P 500 Top 50'].shift(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_for_causality.fillna(value=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neg</th>\n",
       "      <th>neutral</th>\n",
       "      <th>pos</th>\n",
       "      <th>abs_sentiment</th>\n",
       "      <th>rel_sentiment</th>\n",
       "      <th>S&amp;P 500 Top 50</th>\n",
       "      <th>pct_change</th>\n",
       "      <th>log_ret</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-03-04</th>\n",
       "      <td>5970</td>\n",
       "      <td>14727</td>\n",
       "      <td>14000</td>\n",
       "      <td>8030</td>\n",
       "      <td>0.402103</td>\n",
       "      <td>2208.68</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-05</th>\n",
       "      <td>6811</td>\n",
       "      <td>16115</td>\n",
       "      <td>15810</td>\n",
       "      <td>8999</td>\n",
       "      <td>0.397816</td>\n",
       "      <td>2210.25</td>\n",
       "      <td>0.000711</td>\n",
       "      <td>0.000711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-06</th>\n",
       "      <td>7452</td>\n",
       "      <td>17841</td>\n",
       "      <td>17015</td>\n",
       "      <td>9563</td>\n",
       "      <td>0.390853</td>\n",
       "      <td>2199.74</td>\n",
       "      <td>-0.004755</td>\n",
       "      <td>-0.004766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-07</th>\n",
       "      <td>6847</td>\n",
       "      <td>16893</td>\n",
       "      <td>16929</td>\n",
       "      <td>10082</td>\n",
       "      <td>0.424041</td>\n",
       "      <td>2180.94</td>\n",
       "      <td>-0.008546</td>\n",
       "      <td>-0.008583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-08</th>\n",
       "      <td>5759</td>\n",
       "      <td>15008</td>\n",
       "      <td>15602</td>\n",
       "      <td>9843</td>\n",
       "      <td>0.460793</td>\n",
       "      <td>2177.70</td>\n",
       "      <td>-0.001486</td>\n",
       "      <td>-0.001487</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             neg  neutral    pos  abs_sentiment  rel_sentiment  \\\n",
       "date                                                             \n",
       "2019-03-04  5970    14727  14000           8030       0.402103   \n",
       "2019-03-05  6811    16115  15810           8999       0.397816   \n",
       "2019-03-06  7452    17841  17015           9563       0.390853   \n",
       "2019-03-07  6847    16893  16929          10082       0.424041   \n",
       "2019-03-08  5759    15008  15602           9843       0.460793   \n",
       "\n",
       "            S&P 500 Top 50  pct_change   log_ret  \n",
       "date                                              \n",
       "2019-03-04         2208.68    0.000000  0.000000  \n",
       "2019-03-05         2210.25    0.000711  0.000711  \n",
       "2019-03-06         2199.74   -0.004755 -0.004766  \n",
       "2019-03-07         2180.94   -0.008546 -0.008583  \n",
       "2019-03-08         2177.70   -0.001486 -0.001487  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_for_causality.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.1 Check if time series are stationary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We test if our time series are stationary. For this purpose we utilise the ADF test, applied to a single series at a time (univariate time series). We utilised the python implementation available via statsmodel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ADF (Augmented Dickey Fuller) Test\n",
    "#define function for ADF test\n",
    "from statsmodels.tsa.stattools import adfuller\n",
    "def adf_test(timeseries):\n",
    "    #Perform Dickey-Fuller test:\n",
    "    print('Results of Dickey-Fuller Test:')\n",
    "    dftest = adfuller(timeseries, autolag='AIC', maxlag=8)\n",
    "    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic',\n",
    "                                             'p-value','#Lags Used',\n",
    "                                             'Number of Observations Used'])\n",
    "    for key,value in dftest[4].items():\n",
    "        dfoutput['Critical Value (%s)'%key] = value\n",
    "    print(dfoutput)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Dickey-Fuller Test:\n",
      "Test Statistic                -1.485676e+01\n",
      "p-value                        1.743628e-27\n",
      "#Lags Used                     8.000000e+00\n",
      "Number of Observations Used    1.100000e+01\n",
      "Critical Value (1%)           -4.223238e+00\n",
      "Critical Value (5%)           -3.189369e+00\n",
      "Critical Value (10%)          -2.729839e+00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "adf_test(df_for_causality['S&P 500 Top 50'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Dickey-Fuller Test:\n",
      "Test Statistic                 -3.020101\n",
      "p-value                         0.033059\n",
      "#Lags Used                      8.000000\n",
      "Number of Observations Used    11.000000\n",
      "Critical Value (1%)            -4.223238\n",
      "Critical Value (5%)            -3.189369\n",
      "Critical Value (10%)           -2.729839\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "adf_test(df_for_causality['log_ret'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above tests, we see that the time series for absolute and log returns are stationary. Log return values are significant at the 5% level. It suffices for our case, since we do not have a lot of data to play around with, and results are bound to be weak."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Dickey-Fuller Test:\n",
      "Test Statistic                -7.321378e+00\n",
      "p-value                        1.191696e-10\n",
      "#Lags Used                     8.000000e+00\n",
      "Number of Observations Used    1.100000e+01\n",
      "Critical Value (1%)           -4.223238e+00\n",
      "Critical Value (5%)           -3.189369e+00\n",
      "Critical Value (10%)          -2.729839e+00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "adf_test(df_for_causality['rel_sentiment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Dickey-Fuller Test:\n",
      "Test Statistic                  2.155435\n",
      "p-value                         0.998844\n",
      "#Lags Used                      8.000000\n",
      "Number of Observations Used    11.000000\n",
      "Critical Value (1%)            -4.223238\n",
      "Critical Value (5%)            -3.189369\n",
      "Critical Value (10%)           -2.729839\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "adf_test(df_for_causality['abs_sentiment'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The relative and absolute sentiment ADFuller tests show that relative sentiment is stationary, but absolute sentiment is not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Dickey-Fuller Test:\n",
      "Test Statistic                  1.599812\n",
      "p-value                         0.997857\n",
      "#Lags Used                      8.000000\n",
      "Number of Observations Used    11.000000\n",
      "Critical Value (1%)            -4.223238\n",
      "Critical Value (5%)            -3.189369\n",
      "Critical Value (10%)           -2.729839\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "adf_test(df_for_causality['pos'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Dickey-Fuller Test:\n",
      "Test Statistic                  2.598365\n",
      "p-value                         0.999075\n",
      "#Lags Used                      7.000000\n",
      "Number of Observations Used    12.000000\n",
      "Critical Value (1%)            -4.137829\n",
      "Critical Value (5%)            -3.154972\n",
      "Critical Value (10%)           -2.714477\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "adf_test(df_for_causality['neg'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The numbers of positive and negative tweets are not stationary. We log transform the positive and negative tweets columns in order to make them stationary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_for_causality['log_pos'] = np.log(df_for_causality['pos'])\\\n",
    "- np.log(df_for_causality['pos'].shift(1))\n",
    "df_for_causality['log_neg'] = np.log(df_for_causality['neg'])\\\n",
    "- np.log(df_for_causality['neg'].shift(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_for_causality.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Dickey-Fuller Test:\n",
      "Test Statistic                 -0.518347\n",
      "p-value                         0.888386\n",
      "#Lags Used                      8.000000\n",
      "Number of Observations Used    11.000000\n",
      "Critical Value (1%)            -4.223238\n",
      "Critical Value (5%)            -3.189369\n",
      "Critical Value (10%)           -2.729839\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "adf_test(df_for_causality['log_pos'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Dickey-Fuller Test:\n",
      "Test Statistic                  0.138594\n",
      "p-value                         0.968599\n",
      "#Lags Used                      8.000000\n",
      "Number of Observations Used    11.000000\n",
      "Critical Value (1%)            -4.223238\n",
      "Critical Value (5%)            -3.189369\n",
      "Critical Value (10%)           -2.729839\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "adf_test(df_for_causality['log_neg'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results have improved, but still we do not have complete stationarity. We will have to continue with current values, since we do not have a lot of data to play around with."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2 Granger-Causality of Stock Price with different variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We utilise Python's built-in implementation of granger causality to determine if the stock price is causally affected by different variables. We will go one by one through all the variables, with different lags. Since we have barely a month of day (less than 30 trading days), we will utilise 6 lag days."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.tsa.stattools import grangercausalitytests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.2.1 Absolute Stock Price and Sentiment Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=0.4033  , p=0.5344  , df_denom=16, df_num=1\n",
      "ssr based chi2 test:   chi2=0.4789  , p=0.4889  , df=1\n",
      "likelihood ratio test: chi2=0.4729  , p=0.4916  , df=1\n",
      "parameter F test:         F=0.4033  , p=0.5344  , df_denom=16, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.6422  , p=0.5420  , df_denom=13, df_num=2\n",
      "ssr based chi2 test:   chi2=1.7784  , p=0.4110  , df=2\n",
      "likelihood ratio test: chi2=1.6959  , p=0.4283  , df=2\n",
      "parameter F test:         F=0.6422  , p=0.5420  , df_denom=13, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.3601  , p=0.7832  , df_denom=10, df_num=3\n",
      "ssr based chi2 test:   chi2=1.8365  , p=0.6070  , df=3\n",
      "likelihood ratio test: chi2=1.7439  , p=0.6272  , df=3\n",
      "parameter F test:         F=0.3601  , p=0.7832  , df_denom=10, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=0.2694  , p=0.8887  , df_denom=7, df_num=4\n",
      "ssr based chi2 test:   chi2=2.4627  , p=0.6513  , df=4\n",
      "likelihood ratio test: chi2=2.2907  , p=0.6825  , df=4\n",
      "parameter F test:         F=0.2694  , p=0.8887  , df_denom=7, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=0.6300  , p=0.6910  , df_denom=4, df_num=5\n",
      "ssr based chi2 test:   chi2=11.8131 , p=0.0374  , df=5\n",
      "likelihood ratio test: chi2=8.7126  , p=0.1211  , df=5\n",
      "parameter F test:         F=0.6300  , p=0.6910  , df_denom=4, df_num=5\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 6\n",
      "ssr based F test:         F=1.7224  , p=0.5250  , df_denom=1, df_num=6\n",
      "ssr based chi2 test:   chi2=144.6846, p=0.0000  , df=6\n",
      "likelihood ratio test: chi2=33.9901 , p=0.0000  , df=6\n",
      "parameter F test:         F=1.7224  , p=0.5250  , df_denom=1, df_num=6\n"
     ]
    }
   ],
   "source": [
    "granger_test_result = grangercausalitytests(\n",
    "    df_for_causality[['S&P 500 Top 50','rel_sentiment']].values,maxlag=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=0.3661  , p=0.5536  , df_denom=16, df_num=1\n",
      "ssr based chi2 test:   chi2=0.4347  , p=0.5097  , df=1\n",
      "likelihood ratio test: chi2=0.4298  , p=0.5121  , df=1\n",
      "parameter F test:         F=0.3661  , p=0.5536  , df_denom=16, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.2551  , p=0.7786  , df_denom=13, df_num=2\n",
      "ssr based chi2 test:   chi2=0.7064  , p=0.7025  , df=2\n",
      "likelihood ratio test: chi2=0.6929  , p=0.7072  , df=2\n",
      "parameter F test:         F=0.2551  , p=0.7786  , df_denom=13, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.2000  , p=0.8941  , df_denom=10, df_num=3\n",
      "ssr based chi2 test:   chi2=1.0198  , p=0.7965  , df=3\n",
      "likelihood ratio test: chi2=0.9903  , p=0.8036  , df=3\n",
      "parameter F test:         F=0.2000  , p=0.8941  , df_denom=10, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=0.1197  , p=0.9711  , df_denom=7, df_num=4\n",
      "ssr based chi2 test:   chi2=1.0942  , p=0.8952  , df=4\n",
      "likelihood ratio test: chi2=1.0584  , p=0.9008  , df=4\n",
      "parameter F test:         F=0.1197  , p=0.9711  , df_denom=7, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=0.4493  , p=0.7983  , df_denom=4, df_num=5\n",
      "ssr based chi2 test:   chi2=8.4236  , p=0.1344  , df=5\n",
      "likelihood ratio test: chi2=6.6854  , p=0.2451  , df=5\n",
      "parameter F test:         F=0.4493  , p=0.7983  , df_denom=4, df_num=5\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 6\n",
      "ssr based F test:         F=0.1999  , p=0.9333  , df_denom=1, df_num=6\n",
      "ssr based chi2 test:   chi2=16.7939 , p=0.0101  , df=6\n",
      "likelihood ratio test: chi2=11.0356 , p=0.0873  , df=6\n",
      "parameter F test:         F=0.1999  , p=0.9333  , df_denom=1, df_num=6\n"
     ]
    }
   ],
   "source": [
    "granger_test_result = grangercausalitytests(\n",
    "    df_for_causality[['S&P 500 Top 50','abs_sentiment']].values,maxlag=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=0.5247  , p=0.4793  , df_denom=16, df_num=1\n",
      "ssr based chi2 test:   chi2=0.6231  , p=0.4299  , df=1\n",
      "likelihood ratio test: chi2=0.6131  , p=0.4336  , df=1\n",
      "parameter F test:         F=0.5247  , p=0.4793  , df_denom=16, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.2135  , p=0.8105  , df_denom=13, df_num=2\n",
      "ssr based chi2 test:   chi2=0.5914  , p=0.7440  , df=2\n",
      "likelihood ratio test: chi2=0.5818  , p=0.7476  , df=2\n",
      "parameter F test:         F=0.2135  , p=0.8105  , df_denom=13, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.2665  , p=0.8481  , df_denom=10, df_num=3\n",
      "ssr based chi2 test:   chi2=1.3591  , p=0.7151  , df=3\n",
      "likelihood ratio test: chi2=1.3075  , p=0.7274  , df=3\n",
      "parameter F test:         F=0.2665  , p=0.8481  , df_denom=10, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=0.1074  , p=0.9761  , df_denom=7, df_num=4\n",
      "ssr based chi2 test:   chi2=0.9819  , p=0.9125  , df=4\n",
      "likelihood ratio test: chi2=0.9529  , p=0.9168  , df=4\n",
      "parameter F test:         F=0.1074  , p=0.9761  , df_denom=7, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=0.4525  , p=0.7963  , df_denom=4, df_num=5\n",
      "ssr based chi2 test:   chi2=8.4848  , p=0.1315  , df=5\n",
      "likelihood ratio test: chi2=6.7245  , p=0.2419  , df=5\n",
      "parameter F test:         F=0.4525  , p=0.7963  , df_denom=4, df_num=5\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 6\n",
      "ssr based F test:         F=0.8254  , p=0.6868  , df_denom=1, df_num=6\n",
      "ssr based chi2 test:   chi2=69.3352 , p=0.0000  , df=6\n",
      "likelihood ratio test: chi2=24.9734 , p=0.0003  , df=6\n",
      "parameter F test:         F=0.8254  , p=0.6868  , df_denom=1, df_num=6\n"
     ]
    }
   ],
   "source": [
    "granger_test_result = grangercausalitytests(\n",
    "    df_for_causality[['S&P 500 Top 50','pos']].values,maxlag=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=0.6180  , p=0.4433  , df_denom=16, df_num=1\n",
      "ssr based chi2 test:   chi2=0.7339  , p=0.3916  , df=1\n",
      "likelihood ratio test: chi2=0.7200  , p=0.3961  , df=1\n",
      "parameter F test:         F=0.6180  , p=0.4433  , df_denom=16, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.2247  , p=0.8018  , df_denom=13, df_num=2\n",
      "ssr based chi2 test:   chi2=0.6222  , p=0.7326  , df=2\n",
      "likelihood ratio test: chi2=0.6117  , p=0.7365  , df=2\n",
      "parameter F test:         F=0.2247  , p=0.8018  , df_denom=13, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.3022  , p=0.8232  , df_denom=10, df_num=3\n",
      "ssr based chi2 test:   chi2=1.5413  , p=0.6728  , df=3\n",
      "likelihood ratio test: chi2=1.4754  , p=0.6880  , df=3\n",
      "parameter F test:         F=0.3022  , p=0.8232  , df_denom=10, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=0.1428  , p=0.9606  , df_denom=7, df_num=4\n",
      "ssr based chi2 test:   chi2=1.3053  , p=0.8605  , df=4\n",
      "likelihood ratio test: chi2=1.2547  , p=0.8690  , df=4\n",
      "parameter F test:         F=0.1428  , p=0.9606  , df_denom=7, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=3.9218  , p=0.1050  , df_denom=4, df_num=5\n",
      "ssr based chi2 test:   chi2=73.5339 , p=0.0000  , df=5\n",
      "likelihood ratio test: chi2=26.6300 , p=0.0001  , df=5\n",
      "parameter F test:         F=3.9218  , p=0.1050  , df_denom=4, df_num=5\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 6\n",
      "ssr based F test:         F=7.8493  , p=0.2666  , df_denom=1, df_num=6\n",
      "ssr based chi2 test:   chi2=659.3377, p=0.0000  , df=6\n",
      "likelihood ratio test: chi2=54.2247 , p=0.0000  , df=6\n",
      "parameter F test:         F=7.8493  , p=0.2666  , df_denom=1, df_num=6\n"
     ]
    }
   ],
   "source": [
    "granger_test_result = grangercausalitytests(\n",
    "    df_for_causality[['S&P 500 Top 50','neg']].values,maxlag=6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Granger-Causality F-test shows that we can not conclude absolute stock price is caused by absolute or relative sentiment, as well as number of positive and negative tweets, for any lag number."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.2.2 Log-Return Stock Price and Sentiment Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=0.1058  , p=0.7492  , df_denom=16, df_num=1\n",
      "ssr based chi2 test:   chi2=0.1256  , p=0.7230  , df=1\n",
      "likelihood ratio test: chi2=0.1252  , p=0.7235  , df=1\n",
      "parameter F test:         F=0.1058  , p=0.7492  , df_denom=16, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.0541  , p=0.9475  , df_denom=13, df_num=2\n",
      "ssr based chi2 test:   chi2=0.1499  , p=0.9278  , df=2\n",
      "likelihood ratio test: chi2=0.1493  , p=0.9281  , df=2\n",
      "parameter F test:         F=0.0541  , p=0.9475  , df_denom=13, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.1180  , p=0.9475  , df_denom=10, df_num=3\n",
      "ssr based chi2 test:   chi2=0.6017  , p=0.8960  , df=3\n",
      "likelihood ratio test: chi2=0.5913  , p=0.8984  , df=3\n",
      "parameter F test:         F=0.1180  , p=0.9475  , df_denom=10, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=0.2841  , p=0.8794  , df_denom=7, df_num=4\n",
      "ssr based chi2 test:   chi2=2.5972  , p=0.6273  , df=4\n",
      "likelihood ratio test: chi2=2.4068  , p=0.6614  , df=4\n",
      "parameter F test:         F=0.2841  , p=0.8794  , df_denom=7, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=0.6289  , p=0.6916  , df_denom=4, df_num=5\n",
      "ssr based chi2 test:   chi2=11.7924 , p=0.0377  , df=5\n",
      "likelihood ratio test: chi2=8.7010  , p=0.1216  , df=5\n",
      "parameter F test:         F=0.6289  , p=0.6916  , df_denom=4, df_num=5\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 6\n",
      "ssr based F test:         F=0.1006  , p=0.9803  , df_denom=1, df_num=6\n",
      "ssr based chi2 test:   chi2=8.4472  , p=0.2071  , df=6\n",
      "likelihood ratio test: chi2=6.6095  , p=0.3585  , df=6\n",
      "parameter F test:         F=0.1006  , p=0.9803  , df_denom=1, df_num=6\n"
     ]
    }
   ],
   "source": [
    "granger_test_result = grangercausalitytests(\n",
    "    df_for_causality[['log_ret','rel_sentiment']].values,maxlag=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=0.0877  , p=0.7710  , df_denom=16, df_num=1\n",
      "ssr based chi2 test:   chi2=0.1041  , p=0.7470  , df=1\n",
      "likelihood ratio test: chi2=0.1038  , p=0.7473  , df=1\n",
      "parameter F test:         F=0.0877  , p=0.7710  , df_denom=16, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.0338  , p=0.9669  , df_denom=13, df_num=2\n",
      "ssr based chi2 test:   chi2=0.0935  , p=0.9543  , df=2\n",
      "likelihood ratio test: chi2=0.0933  , p=0.9544  , df=2\n",
      "parameter F test:         F=0.0338  , p=0.9669  , df_denom=13, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.1321  , p=0.9388  , df_denom=10, df_num=3\n",
      "ssr based chi2 test:   chi2=0.6735  , p=0.8794  , df=3\n",
      "likelihood ratio test: chi2=0.6605  , p=0.8824  , df=3\n",
      "parameter F test:         F=0.1321  , p=0.9388  , df_denom=10, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=0.1469  , p=0.9586  , df_denom=7, df_num=4\n",
      "ssr based chi2 test:   chi2=1.3434  , p=0.8540  , df=4\n",
      "likelihood ratio test: chi2=1.2900  , p=0.8631  , df=4\n",
      "parameter F test:         F=0.1469  , p=0.9586  , df_denom=7, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=0.1628  , p=0.9638  , df_denom=4, df_num=5\n",
      "ssr based chi2 test:   chi2=3.0529  , p=0.6918  , df=5\n",
      "likelihood ratio test: chi2=2.7788  , p=0.7340  , df=5\n",
      "parameter F test:         F=0.1628  , p=0.9638  , df_denom=4, df_num=5\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 6\n",
      "ssr based F test:         F=0.0414  , p=0.9973  , df_denom=1, df_num=6\n",
      "ssr based chi2 test:   chi2=3.4806  , p=0.7465  , df=6\n",
      "likelihood ratio test: chi2=3.1085  , p=0.7951  , df=6\n",
      "parameter F test:         F=0.0414  , p=0.9973  , df_denom=1, df_num=6\n"
     ]
    }
   ],
   "source": [
    "granger_test_result = grangercausalitytests(\n",
    "    df_for_causality[['log_ret','abs_sentiment']].values,maxlag=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=0.0550  , p=0.8175  , df_denom=16, df_num=1\n",
      "ssr based chi2 test:   chi2=0.0653  , p=0.7983  , df=1\n",
      "likelihood ratio test: chi2=0.0652  , p=0.7984  , df=1\n",
      "parameter F test:         F=0.0550  , p=0.8175  , df_denom=16, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.0005  , p=0.9995  , df_denom=13, df_num=2\n",
      "ssr based chi2 test:   chi2=0.0015  , p=0.9993  , df=2\n",
      "likelihood ratio test: chi2=0.0015  , p=0.9993  , df=2\n",
      "parameter F test:         F=0.0005  , p=0.9995  , df_denom=13, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.1492  , p=0.9279  , df_denom=10, df_num=3\n",
      "ssr based chi2 test:   chi2=0.7608  , p=0.8588  , df=3\n",
      "likelihood ratio test: chi2=0.7443  , p=0.8627  , df=3\n",
      "parameter F test:         F=0.1492  , p=0.9279  , df_denom=10, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=0.0964  , p=0.9804  , df_denom=7, df_num=4\n",
      "ssr based chi2 test:   chi2=0.8810  , p=0.9273  , df=4\n",
      "likelihood ratio test: chi2=0.8576  , p=0.9306  , df=4\n",
      "parameter F test:         F=0.0964  , p=0.9804  , df_denom=7, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=0.2770  , p=0.9042  , df_denom=4, df_num=5\n",
      "ssr based chi2 test:   chi2=5.1931  , p=0.3928  , df=5\n",
      "likelihood ratio test: chi2=4.4594  , p=0.4853  , df=5\n",
      "parameter F test:         F=0.2770  , p=0.9042  , df_denom=4, df_num=5\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 6\n",
      "ssr based F test:         F=0.0277  , p=0.9990  , df_denom=1, df_num=6\n",
      "ssr based chi2 test:   chi2=2.3234  , p=0.8877  , df=6\n",
      "likelihood ratio test: chi2=2.1496  , p=0.9054  , df=6\n",
      "parameter F test:         F=0.0277  , p=0.9990  , df_denom=1, df_num=6\n"
     ]
    }
   ],
   "source": [
    "granger_test_result = grangercausalitytests(\n",
    "    df_for_causality[['log_ret','pos']].values,maxlag=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=0.0322  , p=0.8599  , df_denom=16, df_num=1\n",
      "ssr based chi2 test:   chi2=0.0382  , p=0.8451  , df=1\n",
      "likelihood ratio test: chi2=0.0381  , p=0.8451  , df=1\n",
      "parameter F test:         F=0.0322  , p=0.8599  , df_denom=16, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.0115  , p=0.9885  , df_denom=13, df_num=2\n",
      "ssr based chi2 test:   chi2=0.0320  , p=0.9841  , df=2\n",
      "likelihood ratio test: chi2=0.0319  , p=0.9842  , df=2\n",
      "parameter F test:         F=0.0115  , p=0.9885  , df_denom=13, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.1082  , p=0.9533  , df_denom=10, df_num=3\n",
      "ssr based chi2 test:   chi2=0.5520  , p=0.9073  , df=3\n",
      "likelihood ratio test: chi2=0.5432  , p=0.9093  , df=3\n",
      "parameter F test:         F=0.1082  , p=0.9533  , df_denom=10, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=0.0792  , p=0.9863  , df_denom=7, df_num=4\n",
      "ssr based chi2 test:   chi2=0.7244  , p=0.9483  , df=4\n",
      "likelihood ratio test: chi2=0.7085  , p=0.9503  , df=4\n",
      "parameter F test:         F=0.0792  , p=0.9863  , df_denom=7, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=0.4840  , p=0.7769  , df_denom=4, df_num=5\n",
      "ssr based chi2 test:   chi2=9.0743  , p=0.1061  , df=5\n",
      "likelihood ratio test: chi2=7.0964  , p=0.2136  , df=5\n",
      "parameter F test:         F=0.4840  , p=0.7769  , df_denom=4, df_num=5\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 6\n",
      "ssr based F test:         F=1.8347  , p=0.5118  , df_denom=1, df_num=6\n",
      "ssr based chi2 test:   chi2=154.1160, p=0.0000  , df=6\n",
      "likelihood ratio test: chi2=34.7984 , p=0.0000  , df=6\n",
      "parameter F test:         F=1.8347  , p=0.5118  , df_denom=1, df_num=6\n"
     ]
    }
   ],
   "source": [
    "granger_test_result = grangercausalitytests(\n",
    "    df_for_causality[['log_ret','neg']].values,maxlag=6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar to absolute stock price case, we cannot reject the null hypothesis that log return of stock prices is not granger-caused by sentiment variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.3 Vector Autoregressive (VAR) model for Multivariate Timeseries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A Vector Autoregressive model is used to determine linear regression equation for multivariate time series, depending on number of lag days."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.3.1 Model with Log-Return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "var_model = df_for_causality[['log_ret', 'rel_sentiment', 'log_pos', 'log_neg', 'pos', 'neg']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.tsa.vector_ar.var_model import VAR\n",
    "from statsmodels.tsa.vector_ar.var_model import VARResults\n",
    "\n",
    "model = VAR(endog=var_model, freq='B')\n",
    "model_fit = model.fit(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Granger causality F-test. H_0: %s do not Granger-cause log_ret. Conclusion: fail to reject H_0 at 5% significance level.</caption>\n",
       "<tr>\n",
       "  <th>Test statistic</th> <th>Critical value</th> <th>p-value</th>    <th>df</th>   \n",
       "</tr>\n",
       "<tr>\n",
       "      <td>0.5569</td>          <td>2.165</td>      <td>0.835</td>  <td>(10, 30)</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.test_causality('log_ret', ['rel_sentiment', 'log_pos', 'log_neg', 'pos', 'neg'], kind='f').summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "  Summary of Regression Results   \n",
       "==================================\n",
       "Model:                         VAR\n",
       "Method:                        OLS\n",
       "Date:           Sat, 06, Apr, 2019\n",
       "Time:                     08:39:08\n",
       "--------------------------------------------------------------------\n",
       "No. of Equations:         6.00000    BIC:                   -19.9671\n",
       "Nobs:                     18.0000    HQIC:                  -23.2933\n",
       "Log likelihood:           139.183    FPE:                4.39790e-10\n",
       "AIC:                     -23.8254    Det(Omega_mle):     1.07875e-11\n",
       "--------------------------------------------------------------------\n",
       "Results for equation log_ret\n",
       "===================================================================================\n",
       "                      coefficient       std. error           t-stat            prob\n",
       "-----------------------------------------------------------------------------------\n",
       "const                   -0.079181         0.049788           -1.590           0.112\n",
       "L1.log_ret               1.000134         0.754599            1.325           0.185\n",
       "L1.rel_sentiment        -5.497024         3.802559           -1.446           0.148\n",
       "L1.log_pos               2.250150         1.530454            1.470           0.141\n",
       "L1.log_neg              -2.307320         1.528708           -1.509           0.131\n",
       "L1.pos                   0.000011         0.000009            1.213           0.225\n",
       "L1.neg                  -0.000016         0.000016           -0.993           0.321\n",
       "L2.log_ret               0.984283         0.793517            1.240           0.215\n",
       "L2.rel_sentiment         5.747026         3.797766            1.513           0.130\n",
       "L2.log_pos               0.075901         0.048330            1.570           0.116\n",
       "L2.log_neg              -0.082311         0.046496           -1.770           0.077\n",
       "L2.pos                  -0.000016         0.000010           -1.727           0.084\n",
       "L2.neg                   0.000025         0.000016            1.556           0.120\n",
       "===================================================================================\n",
       "\n",
       "Results for equation rel_sentiment\n",
       "===================================================================================\n",
       "                      coefficient       std. error           t-stat            prob\n",
       "-----------------------------------------------------------------------------------\n",
       "const                    0.099115         0.351104            0.282           0.778\n",
       "L1.log_ret             -12.246543         5.321472           -2.301           0.021\n",
       "L1.rel_sentiment        16.884598        26.815849            0.630           0.529\n",
       "L1.log_pos              -7.178298        10.792844           -0.665           0.506\n",
       "L1.log_neg               7.732177        10.780533            0.717           0.473\n",
       "L1.pos                  -0.000016         0.000067           -0.234           0.815\n",
       "L1.neg                  -0.000001         0.000115           -0.007           0.994\n",
       "L2.log_ret             -13.360643         5.595927           -2.388           0.017\n",
       "L2.rel_sentiment       -16.165756        26.782046           -0.604           0.546\n",
       "L2.log_pos               0.187099         0.340825            0.549           0.583\n",
       "L2.log_neg              -0.141384         0.327892           -0.431           0.666\n",
       "L2.pos                   0.000005         0.000067            0.068           0.945\n",
       "L2.neg                   0.000019         0.000113            0.168           0.866\n",
       "===================================================================================\n",
       "\n",
       "Results for equation log_pos\n",
       "===================================================================================\n",
       "                      coefficient       std. error           t-stat            prob\n",
       "-----------------------------------------------------------------------------------\n",
       "const                    0.138022         1.572959            0.088           0.930\n",
       "L1.log_ret              -8.047377        23.840380           -0.338           0.736\n",
       "L1.rel_sentiment        13.726113       120.135935            0.114           0.909\n",
       "L1.log_pos              -9.992485        48.352315           -0.207           0.836\n",
       "L1.log_neg               5.484915        48.297160            0.114           0.910\n",
       "L1.pos                   0.000063         0.000299            0.212           0.832\n",
       "L1.neg                   0.000081         0.000516            0.157           0.875\n",
       "L2.log_ret              53.755274        25.069947            2.144           0.032\n",
       "L2.rel_sentiment       -13.973032       119.984497           -0.116           0.907\n",
       "L2.log_pos              -0.099528         1.526909           -0.065           0.948\n",
       "L2.log_neg              -0.196607         1.468967           -0.134           0.894\n",
       "L2.pos                  -0.000024         0.000300           -0.080           0.937\n",
       "L2.neg                  -0.000145         0.000505           -0.287           0.774\n",
       "===================================================================================\n",
       "\n",
       "Results for equation log_neg\n",
       "===================================================================================\n",
       "                      coefficient       std. error           t-stat            prob\n",
       "-----------------------------------------------------------------------------------\n",
       "const                   -0.138249         1.876208           -0.074           0.941\n",
       "L1.log_ret              19.615855        28.436542            0.690           0.490\n",
       "L1.rel_sentiment       -27.492684       143.296815           -0.192           0.848\n",
       "L1.log_pos               8.332639        57.674106            0.144           0.885\n",
       "L1.log_neg             -14.094142        57.608319           -0.245           0.807\n",
       "L1.pos                   0.000111         0.000357            0.311           0.756\n",
       "L1.neg                   0.000062         0.000615            0.101           0.919\n",
       "L2.log_ret              82.891430        29.903155            2.772           0.006\n",
       "L2.rel_sentiment        28.054446       143.116182            0.196           0.845\n",
       "L2.log_pos              -0.415436         1.821280           -0.228           0.820\n",
       "L2.log_neg               0.019139         1.752168            0.011           0.991\n",
       "L2.pos                  -0.000052         0.000358           -0.146           0.884\n",
       "L2.neg                  -0.000157         0.000602           -0.261           0.794\n",
       "===================================================================================\n",
       "\n",
       "Results for equation pos\n",
       "===================================================================================\n",
       "                      coefficient       std. error           t-stat            prob\n",
       "-----------------------------------------------------------------------------------\n",
       "const                87550.260417    138535.126209            0.632           0.527\n",
       "L1.log_ret         -433108.095055   2099692.460289           -0.206           0.837\n",
       "L1.rel_sentiment   1176298.057442  10580725.325924            0.111           0.911\n",
       "L1.log_pos         -702189.893214   4258530.659129           -0.165           0.869\n",
       "L1.log_neg          511756.167465   4253673.048784            0.120           0.904\n",
       "L1.pos                   2.230165        26.373305            0.085           0.933\n",
       "L1.neg                   4.672757        45.432899            0.103           0.918\n",
       "L2.log_ret          762138.601810   2207983.998472            0.345           0.730\n",
       "L2.rel_sentiment  -1464297.657356  10567387.771354           -0.139           0.890\n",
       "L2.log_pos          -85053.901887    134479.392866           -0.632           0.527\n",
       "L2.log_neg           56544.734928    129376.264568            0.437           0.662\n",
       "L2.pos                   6.442591        26.453397            0.244           0.808\n",
       "L2.neg                 -17.288288        44.484858           -0.389           0.698\n",
       "===================================================================================\n",
       "\n",
       "Results for equation neg\n",
       "===================================================================================\n",
       "                      coefficient       std. error           t-stat            prob\n",
       "-----------------------------------------------------------------------------------\n",
       "const                58519.089838     96870.377203            0.604           0.546\n",
       "L1.log_ret          115335.824215   1468205.257429            0.079           0.937\n",
       "L1.rel_sentiment    564024.480785   7398548.523053            0.076           0.939\n",
       "L1.log_pos         -342498.863770   2977768.040276           -0.115           0.908\n",
       "L1.log_neg          212641.195145   2974371.367105            0.071           0.943\n",
       "L1.pos                   0.583528        18.441475            0.032           0.975\n",
       "L1.neg                   4.750128        31.768853            0.150           0.881\n",
       "L2.log_ret          795469.115633   1543927.873337            0.515           0.606\n",
       "L2.rel_sentiment   -760245.285587   7389222.267847           -0.103           0.918\n",
       "L2.log_pos          -69438.082751     94034.414733           -0.738           0.460\n",
       "L2.log_neg           48692.219052     90466.063682            0.538           0.590\n",
       "L2.pos                   5.213221        18.497479            0.282           0.778\n",
       "L2.neg                 -13.286164        31.105938           -0.427           0.669\n",
       "===================================================================================\n",
       "\n",
       "Correlation matrix of residuals\n",
       "                  log_ret  rel_sentiment   log_pos   log_neg       pos       neg\n",
       "log_ret          1.000000      -0.631810  0.201586  0.423226  0.255032  0.353283\n",
       "rel_sentiment   -0.631810       1.000000 -0.190536 -0.563297 -0.160305 -0.288735\n",
       "log_pos          0.201586      -0.190536  1.000000  0.918213  0.977654  0.959576\n",
       "log_neg          0.423226      -0.563297  0.918213  1.000000  0.885750  0.921124\n",
       "pos              0.255032      -0.160305  0.977654  0.885750  1.000000  0.988620\n",
       "neg              0.353283      -0.288735  0.959576  0.921124  0.988620  1.000000\n",
       "\n"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that log return is not statistically significant with any of our chosen variables. However, their predict power cannot be ruled out."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.3.2 Model with Absolute Stock Price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "var_model = df_for_causality[['S&P 500 Top 50', 'rel_sentiment', 'log_pos', 'log_neg', 'pos']]\n",
    "\n",
    "from statsmodels.tsa.vector_ar.var_model import VAR\n",
    "from statsmodels.tsa.vector_ar.var_model import VARResults\n",
    "\n",
    "model = VAR(endog=var_model, freq='B')\n",
    "model_fit = model.fit(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Granger causality F-test. H_0: %s do not Granger-cause S&P 500 Top 50. Conclusion: fail to reject H_0 at 5% significance level.</caption>\n",
       "<tr>\n",
       "  <th>Test statistic</th> <th>Critical value</th> <th>p-value</th>   <th>df</th>   \n",
       "</tr>\n",
       "<tr>\n",
       "      <td>0.2321</td>          <td>2.217</td>      <td>0.982</td>  <td>(8, 35)</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.test_causality('S&P 500 Top 50', ['rel_sentiment', 'log_pos', 'log_neg', 'pos'], kind='f').summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "  Summary of Regression Results   \n",
       "==================================\n",
       "Model:                         VAR\n",
       "Method:                        OLS\n",
       "Date:           Sat, 06, Apr, 2019\n",
       "Time:                     08:39:32\n",
       "--------------------------------------------------------------------\n",
       "No. of Equations:         5.00000    BIC:                    11.7037\n",
       "Nobs:                     18.0000    HQIC:                   9.35823\n",
       "Log likelihood:          -153.552    FPE:                    21566.9\n",
       "AIC:                      8.98310    Det(Omega_mle):         1986.83\n",
       "--------------------------------------------------------------------\n",
       "Results for equation S&P 500 Top 50\n",
       "====================================================================================\n",
       "                       coefficient       std. error           t-stat            prob\n",
       "------------------------------------------------------------------------------------\n",
       "const                  1041.643399       843.627892            1.235           0.217\n",
       "L1.S&P 500 Top 50         0.772325         0.560885            1.377           0.169\n",
       "L1.rel_sentiment       -621.480092      2077.930586           -0.299           0.765\n",
       "L1.log_pos              239.989345       925.923809            0.259           0.795\n",
       "L1.log_neg             -274.712409       970.573924           -0.283           0.777\n",
       "L1.pos                    0.000843         0.002158            0.390           0.696\n",
       "L2.S&P 500 Top 50        -0.229396         0.490165           -0.468           0.640\n",
       "L2.rel_sentiment        544.443625      2090.027767            0.260           0.794\n",
       "L2.log_pos                3.475700        39.974954            0.087           0.931\n",
       "L2.log_neg              -15.474898        34.359693           -0.450           0.652\n",
       "L2.pos                   -0.000713         0.002212           -0.322           0.747\n",
       "====================================================================================\n",
       "\n",
       "Results for equation rel_sentiment\n",
       "====================================================================================\n",
       "                       coefficient       std. error           t-stat            prob\n",
       "------------------------------------------------------------------------------------\n",
       "const                     4.255044         3.499458            1.216           0.224\n",
       "L1.S&P 500 Top 50        -0.003538         0.002327           -1.521           0.128\n",
       "L1.rel_sentiment          8.236038         8.619477            0.956           0.339\n",
       "L1.log_pos               -3.834978         3.840830           -0.998           0.318\n",
       "L1.log_neg                3.680867         4.026044            0.914           0.361\n",
       "L1.pos                    0.000003         0.000009            0.367           0.714\n",
       "L2.S&P 500 Top 50         0.001737         0.002033            0.854           0.393\n",
       "L2.rel_sentiment         -8.061981         8.669657           -0.930           0.352\n",
       "L2.log_pos                0.254460         0.165820            1.535           0.125\n",
       "L2.log_neg               -0.215966         0.142528           -1.515           0.130\n",
       "L2.pos                   -0.000004         0.000009           -0.397           0.691\n",
       "====================================================================================\n",
       "\n",
       "Results for equation log_pos\n",
       "====================================================================================\n",
       "                       coefficient       std. error           t-stat            prob\n",
       "------------------------------------------------------------------------------------\n",
       "const                   -14.730536        14.715169           -1.001           0.317\n",
       "L1.S&P 500 Top 50        -0.010738         0.009783           -1.098           0.272\n",
       "L1.rel_sentiment         30.551406        36.244771            0.843           0.399\n",
       "L1.log_pos              -16.203783        16.150634           -1.003           0.316\n",
       "L1.log_neg               14.662201        16.929454            0.866           0.386\n",
       "L1.pos                    0.000031         0.000038            0.831           0.406\n",
       "L2.S&P 500 Top 50         0.017209         0.008550            2.013           0.044\n",
       "L2.rel_sentiment        -29.033405        36.455779           -0.796           0.426\n",
       "L2.log_pos               -0.162228         0.697272           -0.233           0.816\n",
       "L2.log_neg               -0.092198         0.599327           -0.154           0.878\n",
       "L2.pos                   -0.000030         0.000039           -0.766           0.444\n",
       "====================================================================================\n",
       "\n",
       "Results for equation log_neg\n",
       "====================================================================================\n",
       "                       coefficient       std. error           t-stat            prob\n",
       "------------------------------------------------------------------------------------\n",
       "const                   -23.572380        20.575568           -1.146           0.252\n",
       "L1.S&P 500 Top 50        -0.002955         0.013680           -0.216           0.829\n",
       "L1.rel_sentiment         13.596684        50.679454            0.268           0.788\n",
       "L1.log_pos               -7.387350        22.582715           -0.327           0.744\n",
       "L1.log_neg                6.112311        23.671704            0.258           0.796\n",
       "L1.pos                    0.000026         0.000053            0.487           0.626\n",
       "L2.S&P 500 Top 50         0.013167         0.011955            1.101           0.271\n",
       "L2.rel_sentiment        -10.338302        50.974497           -0.203           0.839\n",
       "L2.log_pos               -0.707195         0.974965           -0.725           0.468\n",
       "L2.log_neg                0.368066         0.838012            0.439           0.661\n",
       "L2.pos                   -0.000023         0.000054           -0.428           0.668\n",
       "====================================================================================\n",
       "\n",
       "Results for equation pos\n",
       "====================================================================================\n",
       "                       coefficient       std. error           t-stat            prob\n",
       "------------------------------------------------------------------------------------\n",
       "const               -823658.459420    928231.224108           -0.887           0.375\n",
       "L1.S&P 500 Top 50      -146.536203       617.133578           -0.237           0.812\n",
       "L1.rel_sentiment    -255172.560056   2286316.122353           -0.112           0.911\n",
       "L1.log_pos           -48118.088823   1018780.197066           -0.047           0.962\n",
       "L1.log_neg           -87897.378417   1067908.054485           -0.082           0.934\n",
       "L1.pos                    3.864382         2.374965            1.627           0.104\n",
       "L2.S&P 500 Top 50       503.531932       539.320963            0.934           0.350\n",
       "L2.rel_sentiment     348064.286759   2299626.469980            0.151           0.880\n",
       "L2.log_pos           -41906.241759     43983.847566           -0.953           0.341\n",
       "L2.log_neg            11295.352184     37805.459570            0.299           0.765\n",
       "L2.pos                   -2.411168         2.433819           -0.991           0.322\n",
       "====================================================================================\n",
       "\n",
       "Correlation matrix of residuals\n",
       "                  S&P 500 Top 50  rel_sentiment   log_pos   log_neg       pos\n",
       "S&P 500 Top 50          1.000000      -0.560346  0.303771  0.429787  0.158222\n",
       "rel_sentiment          -0.560346       1.000000 -0.681633 -0.852135 -0.357100\n",
       "log_pos                 0.303771      -0.681633  1.000000  0.963541  0.836338\n",
       "log_neg                 0.429787      -0.852135  0.963541  1.000000  0.725804\n",
       "pos                     0.158222      -0.357100  0.836338  0.725804  1.000000\n",
       "\n"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Significance could not be established."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Individual Stock Data (S&P500 Top 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(df['ticker'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tickers = list(set(df['ticker'].unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tickers.append('BRK-B')\n",
    "tickers.remove('BRK')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(tickers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import fix_yahoo_finance as yf\n",
    "\n",
    "# complete_panel_data = yf.download(tickers, start=\"2019-03-01\", end=\"2019-03-27\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas_datareader\n",
    "\n",
    "start_date = '2019-03-01'\n",
    "end_date = '2019-03-28'\n",
    "\n",
    "complete_panel_data = pandas_datareader.get_data_yahoo(tickers, start_date, end_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "complete_panel_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "complete_panel_data.loc[complete_panel_data.index]['Adj Close']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#complete_panel_data.to_csv('panel_data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
